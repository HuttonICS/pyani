# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2.1

orbs:
  codecov: codecov/codecov@1.0.5

workflows:
  version: 2.1
  test:
    jobs:
      - test-3_10:
        context:
          - pyani
      - test-3_9:
        context:
          - pyani
      - test-3_8:
        context:
          - pyani
      - test-3_7:
        context:
          - pyani
      - test-3_6:
        context:
          - pyani
  weekly:
    triggers:
      - schedule:
          cron: "0 0 * * 6"
          filters:
            branches:
              only:
                - master
    jobs:
      - test-3_10:
        context:
          - pyani
      - test-3_9:
        context:
          - pyani
      - test-3_8:
        context:
          - pyani
      - test-3_7:
        context:
          - pyani
      - test-3_6:
        context:
          - pyani

jobs:
  test-3_8: &test-template
    docker:
      - image: cimg/python:3.8.9

    working_directory: ~/repo

    steps:
      - checkout

      - run:
          name: set_environment_variables
          command: |
            export PYTHONVER=`python --version | sed -r 's/ /_/g'`

      - restore_cache:
          keys:
            - pyani-dependencies-pip-{{ .Environment.PYTHONVER }}-{{ .Branch }}-{{ checksum "requirements.txt" }}-{{ checksum "requirements-dev.txt" }}-{{ checksum "requirements-pip.txt" }}-{{ checksum "requirements-thirdparty.txt" }}-{{ checksum "requirements-fastani.txt" }}-{{ checksum "requirements-pyqt-conda.txt" }}-{{ checksum "requirements-pyqt-pip.txt" }}
            - pyani-dependencies-pip-

      - run:
          name: update apt-get
          command: |
            sudo apt-get update --allow-releaseinfo-change
            sudo apt-get upgrade
      - run:
          name: install third-party tools
          command: |
            sudo apt-get install csh mummer ncbi-blast+
      - run:
          name: install legacy BLAST
          command: |
            curl -o legacy_blast.tar.gz ftp://ftp.ncbi.nlm.nih.gov/blast/executables/legacy.NOTSUPPORTED/2.2.26/blast-2.2.26-x64-linux.tar.gz
            tar -zxf legacy_blast.tar.gz
            echo 'export PATH=$PWD/blast-2.2.26/bin:$PATH' >> $BASH_ENV
            source $BASH_ENV
      - run:
          name: install fastANI
          command: |
            wget https://github.com/ParBLiSS/FastANI/releases/download/v1.33/fastANI-Linux64-v1.33.zip
            unzip fastANI-Linux64-v1.33.zip
            echo 'export PATH=$PWD:$PATH' >> $BASH_ENV
            source $BASH_ENV
            fastANI -h


      - run:
          name: install dependencies
          command: |
            pip install --upgrade pip setuptools virtualenv
            pip install -r requirements.txt
            pip install -r requirements-dev.txt
            pip install -r requirements-pip.txt
            pip install -r requirements-pyqt-pip.txt

      - save_cache:
          paths:
            - .pyenv
          key: pyani-dependencies-pip-{{ .Environment.PYTHONVER }}-{{ .Branch }}-{{ checksum "requirements.txt" }}-{{ checksum "requirements-dev.txt" }}-{{ checksum "requirements-pip.txt" }}-{{ checksum "requirements-thirdparty.txt" }}-{{ checksum "requirements-fastani.txt" }}-{{ checksum "requirements-pyqt-conda.txt" }}-{{ checksum "requirements-pyqt-pip.txt" }}

      - run:
          name: install pyani
          command: |
            pip install -e .  # Install the repo as a package

      - run:
          name: run tests
          command: |
            python -m pytest -v --cov=pyani --cov-report xml:.coverage.xml

      - store_artifacts:
          path: tests/test_output
          destination: tests/test_output
      - store_artifacts:
          path: .coverage.xml
          destination: .coverage.xml

      - codecov/upload:
          file: .coverage.xml

  test-3_6:
    <<: *test-template
    docker:
      - image: cimg/python:3.6.9
  test-3_7:
    <<: *test-template
    docker:
      - image: cimg/python:3.7.10
  test-3_9:
    <<: *test-template
    docker:
      - image: cimg/python:3.9.5
  test-3_10:
    <<: *test-template
    docker:
      - image: cimg/python:3.10.1
